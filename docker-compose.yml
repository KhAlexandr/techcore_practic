volumes:
  fp_data:
  redis_data:
  mongo_data:
  rabbitmq_data:
  zipkin_data:
  grafana_data:
  prometheus_data:

services:
  db:
    image: postgres:16.0
    env_file: .env
    volumes:
      - fp_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:latest
    container_name: redis-container
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/var/lib/redis/data

  mongo:
    image: mongo
    container_name: mongo-container
    env_file:
      - .env
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/var/lib/mongo/data

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq-container
    ports:
      - "5672:5672"
      - "15672:1572"
    env_file:
      - .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper-container
    ports:
      - "2181:2181"
    env_file:
      - .env

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    hostname: kafka
    container_name: kafka-container
    env_file:
      - .env
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    environment:
      ZIPKIN_ASSUMED_SPAN_DURATION_DAYS: 3
    volumes:
      - zipkin_data:/var/lib/zipkin/data

  celery_worker:
    image: techcore_practic-app:latest
    container_name: celery_worker-container
    command: celery -A app.celery_tasks.celery_apps worker --loglevel=info
    depends_on:
      - rabbitmq
      - redis
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    healthcheck:
      test: [ "CMD", "celery", "-A", "app.celery_tasks.celery_apps", "inspect", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  celery_beat:
    image: techcore_practic-app:latest
    container_name: celery_beat-container
    command: celery -A app.celery_tasks.celery_apps beat --loglevel=info
    depends_on:
      - rabbitmq
      - redis
    environment:
      - PYTHONPATH=/app

  flower:
    image: techcore_practic-app:latest
    container_name: flower-container
    command: celery -A app.celery_tasks.celery_apps flower --port=5555
    ports:
      - "5555:5555"
      - "8003:8000"
    depends_on:
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      celery_worker:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
    restart: always

  analytics-worker:
    image: techcore_practic-app:latest
    command: python3 -m app.kafka_conf.analytics_worker
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MONGODB_URL: mongodb://mongo:27017

  faust-worker:
    image: techcore_practic-app:latest
    command: python -m app.kafka_conf.faust_str worker
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER_URL: kafka:9092

#  traefik:
#    image: traefik:v2.10
#    command:
#      - --api.dashboard=true
#      - --providers.docker=true
#      - --entrypoints.web.address=:80
#    ports:
#      - "80:80"
#      - "8080:8080"
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock

  api:
    image: techcore_practic-app:latest
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.api.rule=Host(`localhost`) && PathPrefix(`/`)"
#      - "traefik.http.services.api.loadbalancer.server.port=80"
    ports:
      - "8000:80"
    depends_on:
      db:
        condition: service_started
      redis:
          condition: service_started
      kafka:
          condition: service_healthy
    environment:
        DATABASE_URL: postgresql+asyncpg://fastapi_user:mysecretpassword@db:5432/fastapi
        REDIS_HOST: redis
        KAFKA_BOOTSTRAP_SERVERS: kafka:9092
        MONGODB_URL: mongodb://admin:password@mongo:27017

  gateway:
    image: techcore_practic-app:latest
    command: uvicorn app.gateway:app --host 0.0.0.0 --port 8000
    ports:
      - "8080:8000"
    depends_on:
      api:
        condition: service_started

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - celery_worker
      - celery_beat
      - flower
      - analytics-worker
      - faust-worker
      - api
      - gateway

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

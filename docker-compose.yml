volumes:
  fp_data:
  redis_data:
  mongo_data:
  rabbitmq_data:


services:
  db:
    image: postgres:16.0
    env_file: .env
    volumes:
      - fp_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:latest
    container_name: redis-container
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/var/lib/redis/data

  mongo:
    image: mongo
    container_name: mongo-container
    env_file:
      - .env
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/var/lib/mongo/data

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq-container
    ports:
      - "5672:5672"
      - "15672:1572"
    env_file:
      - .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/data

  celery_worker:
    build: .
    container_name: celery_worker-container
    command: celery -A app.celery_tasks.celery_apps worker --loglevel=info
    depends_on:
      - rabbitmq
      - redis
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    healthcheck:
      test: [ "CMD", "celery", "-A", "app.celery_tasks.celery_apps", "inspect", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  celery_beat:
    build: .
    container_name: celery_beat-container
    command: celery -A app.celery_tasks.celery_apps beat --loglevel=info
    depends_on:
      - rabbitmq
      - redis
    environment:
      - PYTHONPATH=/app

  flower:
    build: .
    container_name: flower-container
    command: celery -A app.celery_tasks.celery_apps flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      celery_worker:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper-container
    ports:
      - "2181:2181"
    env_file:
      - .env

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    hostname: kafka
    container_name: kafka-container
    env_file:
      - .env
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  analytics-worker:
    build: .
    command: python3 -m app.kafka_conf.analytics_worker
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MONGODB_URL: mongodb://mongo:27017

  faust-worker:
    build: .
    command: python -m app.kafka_conf.faust_str worker
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER_URL: kafka:9092
